os :centos6.4
gcc:4.4.7
bison:3.0.2

+实例
demo1
功能，波兰后缀表达式的分析和计算，尽可能简单的语法文件以展示如何编写y文件
命令：
bison demo1.y
gcc -g demo1.tab.c -o demo1

demo2
功能，中缀表达式的分析和计算

demo3
功能，语法分析的错误恢复

+练习
++练习一
+++目的：
简单的语法定义
实现yyparse所需的yylex词法分析接口。

+++功能设计：实现一个对输入字符串判断的语法分析。输入hello world将打印“hello world”，其他输入将打印“word”

例如：
输入
hello
world
输出：
hello world!

输入：
asdfasdf
输出：
word!


+++编译：
bison p1.y -d
gcc p1parse.c p1.tab.c -o p1 -g

++练习二
+++目的：
了解symbol和相关使用
symbol分为terminal和nonterminal的symbol，翻译为中为终结符号和非终结符号。
终结符号，从字面上理解就是最终的符号，这些符号的特点是不可由其他符号规约得到
非终结符号，与终结符号相反，不是终结符号则则必然是非终结符号。这些符号由其他符号规约得到，参与规约的符号可以是终结符号也可以是非终结符号

+++功能设计：实现一个加法计算器。不断的累加输入的数字，在输入'='后，打印之前输入的内容的总和。输入'quit'打印'quit'
例如
输入：
1
+
2
=
输出：
result is 3.000000

+++编译
bison p2.y -d
gcc p2parse.c p2.tab.c -o p2 -g

++练习三
+++目的
了解可重入(reentrant)的语法分析的编写

+++功能设计
将练习一/二修改为可重入的语法分析

+++总结
N/A


++练习四
+++目的
parse从yylex获得输入结束的练习


++练习五
+++目的
验证parse-param和lex-param的关系

1、只定义lex-param。
练习说明：在生成c文件后无法编译通过，报告未定义的变量。参考p5_1.y

2、只定义parse-param。
练习说明：在rule部分，可以直接使用parse-param定义的变量。指定该参数后，需要修改yyerror的函数定义，参考p5_2.y

3、定义lex-param和parse-param，同名同类型。
练习说明：无编译错误，调用正常。参考p5_3.y

4、定义lex-param和parse-param，不同名但同类型。
练习说明：代码与3的相同，仅是在lex-param修改了类型名字，与parse-param不同。编译出现错误，和1的现象相同。

5、定义lex-param和parse-param，同名但不同类型。
练习说明：代码与3的相同，仅是在lex-param修改了类型,与parse-param不同。编译\
出现错误，报告类型冲突。

6、定义两组lex-param和parse-param，但顺序不同。
练习说明：N/A

总结
1、由于parse-param指定的参数是yyparse函数的参数，rule中使用毫无问题
2、lex-param有两个注意点。lex-param中的名字，就是在yyparse中调用的名字，所以定义了lex-param，通常要定义一个同名的parse-param（如果在y文件的定义区定义一个同名同类型的变量，也可以编译通过）；lex-param的顺序就是yylex的函数顺序。

